name: CI/CD Pipeline

on:
  push:
    branches: ["main", "develop"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php-version: ["8.2", "8.3"]

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ci4_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: intl, mbstring, xml, curl, mysqlnd, pdo_mysql
          coverage: xdebug

      - name: Validate composer.json and composer.lock
        run: composer validate --strict

      - name: Cache Composer packages
        id: composer-cache
        uses: actions/cache@v4
        with:
          path: vendor
          key: ${{ runner.os }}-php-${{ matrix.php-version }}-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ matrix.php-version }}-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm ci

      - name: Build assets
        run: |
          npm run build:css
          npm run build

      - name: Copy environment file
        run: cp env .env

      - name: Generate app key
        run: php spark key:generate

      - name: Run database migrations
        run: php spark migrate --all
        env:
          CI_ENVIRONMENT: testing
          database.default.hostname: 127.0.0.1
          database.default.database: ci4_test
          database.default.username: root
          database.default.password: root

      - name: Run PHP-CS-Fixer (check only)
        run: ./vendor/bin/php-cs-fixer fix --dry-run --diff --verbose --allow-risky=yes

      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse --no-progress

      - name: Run PHPUnit tests
        run: ./vendor/bin/phpunit --coverage-clover coverage.xml
        env:
          CI_ENVIRONMENT: testing

      - name: Run Prettier check
        run: npm run prettier

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  deploy:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deploy to production
        run: echo "Add your deployment steps here"
        # Add your actual deployment steps
